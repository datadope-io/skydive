// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package procs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF2260f45DecodeGithubComSkydiveProjectSkydiveTopologyProbesProcs(in *jlexer.Lexer, out *NodeData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "SubType":
			out.SubType = string(in.String())
		case "TCPListen":
			if in.IsNull() {
				in.Skip()
				out.TCPListen = nil
			} else {
				in.Delim('[')
				if out.TCPListen == nil {
					if !in.IsDelim(']') {
						out.TCPListen = make([]Endpoint, 0, 1)
					} else {
						out.TCPListen = []Endpoint{}
					}
				} else {
					out.TCPListen = (out.TCPListen)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Endpoint
					(v1).UnmarshalEasyJSON(in)
					out.TCPListen = append(out.TCPListen, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TCPConn":
			if in.IsNull() {
				in.Skip()
				out.TCPConn = nil
			} else {
				in.Delim('[')
				if out.TCPConn == nil {
					if !in.IsDelim(']') {
						out.TCPConn = make([]Endpoint, 0, 1)
					} else {
						out.TCPConn = []Endpoint{}
					}
				} else {
					out.TCPConn = (out.TCPConn)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Endpoint
					(v2).UnmarshalEasyJSON(in)
					out.TCPConn = append(out.TCPConn, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "LastSeen":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastSeen).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF2260f45EncodeGithubComSkydiveProjectSkydiveTopologyProbesProcs(out *jwriter.Writer, in NodeData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"SubType\":"
		out.RawString(prefix)
		out.String(string(in.SubType))
	}
	{
		const prefix string = ",\"TCPListen\":"
		out.RawString(prefix)
		if in.TCPListen == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.TCPListen {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TCPConn\":"
		out.RawString(prefix)
		if in.TCPConn == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.TCPConn {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"LastSeen\":"
		out.RawString(prefix)
		out.Raw((in.LastSeen).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NodeData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF2260f45EncodeGithubComSkydiveProjectSkydiveTopologyProbesProcs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NodeData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF2260f45EncodeGithubComSkydiveProjectSkydiveTopologyProbesProcs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NodeData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF2260f45DecodeGithubComSkydiveProjectSkydiveTopologyProbesProcs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NodeData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF2260f45DecodeGithubComSkydiveProjectSkydiveTopologyProbesProcs(l, v)
}
func easyjsonF2260f45DecodeGithubComSkydiveProjectSkydiveTopologyProbesProcs1(in *jlexer.Lexer, out *Endpoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Proc":
			out.Proc = string(in.String())
		case "IP":
			out.IP = string(in.String())
		case "Port":
			out.Port = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF2260f45EncodeGithubComSkydiveProjectSkydiveTopologyProbesProcs1(out *jwriter.Writer, in Endpoint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Proc\":"
		out.RawString(prefix[1:])
		out.String(string(in.Proc))
	}
	{
		const prefix string = ",\"IP\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Port))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Endpoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF2260f45EncodeGithubComSkydiveProjectSkydiveTopologyProbesProcs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Endpoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF2260f45EncodeGithubComSkydiveProjectSkydiveTopologyProbesProcs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Endpoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF2260f45DecodeGithubComSkydiveProjectSkydiveTopologyProbesProcs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Endpoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF2260f45DecodeGithubComSkydiveProjectSkydiveTopologyProbesProcs1(l, v)
}

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package neutron

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson582d14dfDecodeGithubComSkydiveProjectSkydiveTopologyProbesNeutron(in *jlexer.Lexer, out *Metadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PortID":
			out.PortID = string(in.String())
		case "TenantID":
			out.TenantID = string(in.String())
		case "NetworkID":
			out.NetworkID = string(in.String())
		case "NetworkName":
			out.NetworkName = string(in.String())
		case "IPV4":
			if in.IsNull() {
				in.Skip()
				out.IPV4 = nil
			} else {
				in.Delim('[')
				if out.IPV4 == nil {
					if !in.IsDelim(']') {
						out.IPV4 = make([]string, 0, 4)
					} else {
						out.IPV4 = []string{}
					}
				} else {
					out.IPV4 = (out.IPV4)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.IPV4 = append(out.IPV4, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "IPV6":
			if in.IsNull() {
				in.Skip()
				out.IPV6 = nil
			} else {
				in.Delim('[')
				if out.IPV6 == nil {
					if !in.IsDelim(']') {
						out.IPV6 = make([]string, 0, 4)
					} else {
						out.IPV6 = []string{}
					}
				} else {
					out.IPV6 = (out.IPV6)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.IPV6 = append(out.IPV6, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "VNI":
			out.VNI = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson582d14dfEncodeGithubComSkydiveProjectSkydiveTopologyProbesNeutron(out *jwriter.Writer, in Metadata) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PortID != "" {
		const prefix string = ",\"PortID\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.PortID))
	}
	if in.TenantID != "" {
		const prefix string = ",\"TenantID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TenantID))
	}
	if in.NetworkID != "" {
		const prefix string = ",\"NetworkID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NetworkID))
	}
	if in.NetworkName != "" {
		const prefix string = ",\"NetworkName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NetworkName))
	}
	if len(in.IPV4) != 0 {
		const prefix string = ",\"IPV4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.IPV4 {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	if len(in.IPV6) != 0 {
		const prefix string = ",\"IPV6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.IPV6 {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.VNI != 0 {
		const prefix string = ",\"VNI\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VNI))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson582d14dfEncodeGithubComSkydiveProjectSkydiveTopologyProbesNeutron(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson582d14dfEncodeGithubComSkydiveProjectSkydiveTopologyProbesNeutron(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson582d14dfDecodeGithubComSkydiveProjectSkydiveTopologyProbesNeutron(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson582d14dfDecodeGithubComSkydiveProjectSkydiveTopologyProbesNeutron(l, v)
}

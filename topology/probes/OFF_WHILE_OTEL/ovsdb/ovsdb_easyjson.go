// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ovsdb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	topology "github.com/skydive-project/skydive/topology"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA006d1d6DecodeGithubComSkydiveProjectSkydiveTopologyProbesOvsdb(in *jlexer.Lexer, out *OvsMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OtherConfig":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.OtherConfig = make(map[string]string)
				} else {
					out.OtherConfig = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.OtherConfig)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Options":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Options = make(map[string]string)
				} else {
					out.Options = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Options)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Protocols":
			if in.IsNull() {
				in.Skip()
				out.Protocols = nil
			} else {
				in.Delim('[')
				if out.Protocols == nil {
					if !in.IsDelim(']') {
						out.Protocols = make([]string, 0, 4)
					} else {
						out.Protocols = []string{}
					}
				} else {
					out.Protocols = (out.Protocols)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Protocols = append(out.Protocols, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DBVersion":
			out.DBVersion = string(in.String())
		case "Version":
			out.Version = string(in.String())
		case "Error":
			out.Error = string(in.String())
		case "Metric":
			if in.IsNull() {
				in.Skip()
				out.Metric = nil
			} else {
				if out.Metric == nil {
					out.Metric = new(topology.InterfaceMetric)
				}
				(*out.Metric).UnmarshalEasyJSON(in)
			}
		case "LastUpdateMetric":
			if in.IsNull() {
				in.Skip()
				out.LastUpdateMetric = nil
			} else {
				if out.LastUpdateMetric == nil {
					out.LastUpdateMetric = new(topology.InterfaceMetric)
				}
				(*out.LastUpdateMetric).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA006d1d6EncodeGithubComSkydiveProjectSkydiveTopologyProbesOvsdb(out *jwriter.Writer, in OvsMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.OtherConfig) != 0 {
		const prefix string = ",\"OtherConfig\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.OtherConfig {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.String(string(v4Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Options) != 0 {
		const prefix string = ",\"Options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Options {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Protocols) != 0 {
		const prefix string = ",\"Protocols\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Protocols {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if in.DBVersion != "" {
		const prefix string = ",\"DBVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DBVersion))
	}
	if in.Version != "" {
		const prefix string = ",\"Version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if in.Error != "" {
		const prefix string = ",\"Error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Error))
	}
	if in.Metric != nil {
		const prefix string = ",\"Metric\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Metric).MarshalEasyJSON(out)
	}
	if in.LastUpdateMetric != nil {
		const prefix string = ",\"LastUpdateMetric\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LastUpdateMetric).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OvsMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA006d1d6EncodeGithubComSkydiveProjectSkydiveTopologyProbesOvsdb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OvsMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA006d1d6EncodeGithubComSkydiveProjectSkydiveTopologyProbesOvsdb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OvsMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA006d1d6DecodeGithubComSkydiveProjectSkydiveTopologyProbesOvsdb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OvsMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA006d1d6DecodeGithubComSkydiveProjectSkydiveTopologyProbesOvsdb(l, v)
}

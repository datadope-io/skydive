// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package lldp

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBa0ee0e3DecodeGithubComSkydiveProjectSkydiveTopologyProbesLldp(in *jlexer.Lexer, out *VLANNameMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = int64(in.Int64())
		case "Name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBa0ee0e3EncodeGithubComSkydiveProjectSkydiveTopologyProbesLldp(out *jwriter.Writer, in VLANNameMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VLANNameMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBa0ee0e3EncodeGithubComSkydiveProjectSkydiveTopologyProbesLldp(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VLANNameMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBa0ee0e3EncodeGithubComSkydiveProjectSkydiveTopologyProbesLldp(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VLANNameMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBa0ee0e3DecodeGithubComSkydiveProjectSkydiveTopologyProbesLldp(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VLANNameMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBa0ee0e3DecodeGithubComSkydiveProjectSkydiveTopologyProbesLldp(l, v)
}
func easyjsonBa0ee0e3DecodeGithubComSkydiveProjectSkydiveTopologyProbesLldp1(in *jlexer.Lexer, out *PPVIDMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Enabled":
			out.Enabled = bool(in.Bool())
		case "ID":
			out.ID = int64(in.Int64())
		case "Supported":
			out.Supported = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBa0ee0e3EncodeGithubComSkydiveProjectSkydiveTopologyProbesLldp1(out *jwriter.Writer, in PPVIDMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Enabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"Supported\":"
		out.RawString(prefix)
		out.Bool(bool(in.Supported))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PPVIDMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBa0ee0e3EncodeGithubComSkydiveProjectSkydiveTopologyProbesLldp1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PPVIDMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBa0ee0e3EncodeGithubComSkydiveProjectSkydiveTopologyProbesLldp1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PPVIDMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBa0ee0e3DecodeGithubComSkydiveProjectSkydiveTopologyProbesLldp1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PPVIDMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBa0ee0e3DecodeGithubComSkydiveProjectSkydiveTopologyProbesLldp1(l, v)
}
func easyjsonBa0ee0e3DecodeGithubComSkydiveProjectSkydiveTopologyProbesLldp2(in *jlexer.Lexer, out *Metadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Description":
			out.Description = string(in.String())
		case "ChassisID":
			out.ChassisID = string(in.String())
		case "ChassisIDType":
			out.ChassisIDType = string(in.String())
		case "SysName":
			out.SysName = string(in.String())
		case "MgmtAddress":
			out.MgmtAddress = string(in.String())
		case "PVID":
			out.PVID = int64(in.Int64())
		case "VIDUsageDigest":
			out.VIDUsageDigest = int64(in.Int64())
		case "ManagementVID":
			out.ManagementVID = int64(in.Int64())
		case "PortID":
			out.PortID = string(in.String())
		case "PortIDType":
			out.PortIDType = string(in.String())
		case "LinkAgggregation":
			if in.IsNull() {
				in.Skip()
				out.LinkAggregation = nil
			} else {
				if out.LinkAggregation == nil {
					out.LinkAggregation = new(LinkAggregationMetadata)
				}
				(*out.LinkAggregation).UnmarshalEasyJSON(in)
			}
		case "VLANNames":
			if in.IsNull() {
				in.Skip()
				out.VLANNames = nil
			} else {
				in.Delim('[')
				if out.VLANNames == nil {
					if !in.IsDelim(']') {
						out.VLANNames = make([]VLANNameMetadata, 0, 2)
					} else {
						out.VLANNames = []VLANNameMetadata{}
					}
				} else {
					out.VLANNames = (out.VLANNames)[:0]
				}
				for !in.IsDelim(']') {
					var v1 VLANNameMetadata
					(v1).UnmarshalEasyJSON(in)
					out.VLANNames = append(out.VLANNames, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PPVIDs":
			if in.IsNull() {
				in.Skip()
				out.PPVIDs = nil
			} else {
				in.Delim('[')
				if out.PPVIDs == nil {
					if !in.IsDelim(']') {
						out.PPVIDs = make([]PPVIDMetadata, 0, 2)
					} else {
						out.PPVIDs = []PPVIDMetadata{}
					}
				} else {
					out.PPVIDs = (out.PPVIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v2 PPVIDMetadata
					(v2).UnmarshalEasyJSON(in)
					out.PPVIDs = append(out.PPVIDs, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBa0ee0e3EncodeGithubComSkydiveProjectSkydiveTopologyProbesLldp2(out *jwriter.Writer, in Metadata) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"Description\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	if in.ChassisID != "" {
		const prefix string = ",\"ChassisID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChassisID))
	}
	if in.ChassisIDType != "" {
		const prefix string = ",\"ChassisIDType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChassisIDType))
	}
	if in.SysName != "" {
		const prefix string = ",\"SysName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SysName))
	}
	if in.MgmtAddress != "" {
		const prefix string = ",\"MgmtAddress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MgmtAddress))
	}
	if in.PVID != 0 {
		const prefix string = ",\"PVID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PVID))
	}
	if in.VIDUsageDigest != 0 {
		const prefix string = ",\"VIDUsageDigest\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VIDUsageDigest))
	}
	if in.ManagementVID != 0 {
		const prefix string = ",\"ManagementVID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ManagementVID))
	}
	if in.PortID != "" {
		const prefix string = ",\"PortID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PortID))
	}
	if in.PortIDType != "" {
		const prefix string = ",\"PortIDType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PortIDType))
	}
	if in.LinkAggregation != nil {
		const prefix string = ",\"LinkAgggregation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LinkAggregation).MarshalEasyJSON(out)
	}
	if len(in.VLANNames) != 0 {
		const prefix string = ",\"VLANNames\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.VLANNames {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.PPVIDs) != 0 {
		const prefix string = ",\"PPVIDs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.PPVIDs {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBa0ee0e3EncodeGithubComSkydiveProjectSkydiveTopologyProbesLldp2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBa0ee0e3EncodeGithubComSkydiveProjectSkydiveTopologyProbesLldp2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBa0ee0e3DecodeGithubComSkydiveProjectSkydiveTopologyProbesLldp2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBa0ee0e3DecodeGithubComSkydiveProjectSkydiveTopologyProbesLldp2(l, v)
}
func easyjsonBa0ee0e3DecodeGithubComSkydiveProjectSkydiveTopologyProbesLldp3(in *jlexer.Lexer, out *LinkAggregationMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Enabled":
			out.Enabled = bool(in.Bool())
		case "PortID":
			out.PortID = int64(in.Int64())
		case "Supported":
			out.Supported = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBa0ee0e3EncodeGithubComSkydiveProjectSkydiveTopologyProbesLldp3(out *jwriter.Writer, in LinkAggregationMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Enabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Enabled))
	}
	if in.PortID != 0 {
		const prefix string = ",\"PortID\":"
		out.RawString(prefix)
		out.Int64(int64(in.PortID))
	}
	{
		const prefix string = ",\"Supported\":"
		out.RawString(prefix)
		out.Bool(bool(in.Supported))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LinkAggregationMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBa0ee0e3EncodeGithubComSkydiveProjectSkydiveTopologyProbesLldp3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LinkAggregationMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBa0ee0e3EncodeGithubComSkydiveProjectSkydiveTopologyProbesLldp3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LinkAggregationMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBa0ee0e3DecodeGithubComSkydiveProjectSkydiveTopologyProbesLldp3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LinkAggregationMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBa0ee0e3DecodeGithubComSkydiveProjectSkydiveTopologyProbesLldp3(l, v)
}
